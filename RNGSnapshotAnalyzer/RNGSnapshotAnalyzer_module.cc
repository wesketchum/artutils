////////////////////////////////////////////////////////////////////////
// Class:       RNGsnapshotAnalyzer
// Module Type: analyzer
// File:        RNGsnapshotAnalyzer_module.cc
//
// Generated at Tue Nov 10 13:06:09 2015 by Wesley Ketchum using artmod
// from cetpkgsupport v1_08_07.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <iostream>

namespace util {
  class RNGsnapshotAnalyzer;
  typedef std::vector<art::RNGsnapshot> RNGsnapshots;
}

class util::RNGsnapshotAnalyzer : public art::EDAnalyzer {
public:
  explicit RNGsnapshotAnalyzer(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  RNGsnapshotAnalyzer(RNGsnapshotAnalyzer const &) = delete;
  RNGsnapshotAnalyzer(RNGsnapshotAnalyzer &&) = delete;
  RNGsnapshotAnalyzer & operator = (RNGsnapshotAnalyzer const &) = delete;
  RNGsnapshotAnalyzer & operator = (RNGsnapshotAnalyzer &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  std::vector<art::InputTag>  fInputLabels;
  bool                        fPrintAllStates;

  void PrintRNGHandleInfo(art::Handle<RNGsnapshots> const&, std::ostream &);
  void PrintRNGsnapshot(art::RNGsnapshot const&, std::ostream &);
  

};


util::RNGsnapshotAnalyzer::RNGsnapshotAnalyzer(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{
  this->reconfigure(p);
}

void util::RNGsnapshotAnalyzer::analyze(art::Event const & e)
{

  std::vector< art::Handle<RNGsnapshots> > rngHandles;

  //if we have specified certain input labels to look at
  if(fInputLabels.size()!=0){
    rngHandles.resize(fInputLabels.size());
    for(size_t i_l=0; i_l<fInputLabels.size(); ++i_l)
      if(!e.getByLabel(fInputLabels[i_l],rngHandles[i_l]))
	throw cet::exception("util::RNGsnapshotAnalyzer") << "Invalid handle for " << fInputLabels[i_l] << std::endl;
  }
  //else, we are just gonna look for all of the RNGsnapshots in the event
  else{
    e.getManyByType(rngHandles);
  }

  for(auto const& rngH : rngHandles)
    PrintRNGHandleInfo(rngH,std::cout);
}

void util::RNGsnapshotAnalyzer::PrintRNGHandleInfo(art::Handle<RNGsnapshots> const& rngH,
						   std::ostream & os)
{
  os << "-------------------------------------------------------------" << std::endl;
  os << *(rngH.provenance()) << std::endl;
  os << "RNGsnapshotInfo:" << std::endl;
  RNGsnapshots const& rngs(*rngH);
  os << "\tTotal snapshots: " << rngs.size() << std::endl;
  for(size_t i_r=0; i_r<rngs.size(); ++i_r){
    os << "\tSnapshot " << i_r << " : " << std::endl;
    PrintRNGsnapshot(rngs[i_r],os);
  }
  os << "-------------------------------------------------------------" << std::endl;
}

void util::RNGsnapshotAnalyzer::PrintRNGsnapshot(art::RNGsnapshot const& rng,
						 std::ostream & os)
{
  os << "\tEngine Kind: " << rng.ekind() << std::endl;
  os << "\tLabel:       " << rng.label() << std::endl;
  os << "\tStates size: " << rng.state().size() << std::endl;
  if(fPrintAllStates)
    for(size_t i_s=0; i_s<rng.state().size(); ++i_s)
      os << "\tSaved state " << i_s << " : " << rng.state()[i_s] << std::endl;
  else{
    os << "\tFirst state = " << rng.state().front()
       << " , Last state = " << rng.state().back() << std::endl;
  }
}

void util::RNGsnapshotAnalyzer::reconfigure(fhicl::ParameterSet const & p)
{
  fInputLabels = p.get< std::vector<art::InputTag> >("InputLabels",std::vector<art::InputTag>());
  fPrintAllStates = p.get<bool>("PrintAllStates",true);
}

DEFINE_ART_MODULE(util::RNGsnapshotAnalyzer)
